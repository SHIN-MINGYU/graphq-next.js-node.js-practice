scalar Date

type Query {
  ChatLog(chat_room: ID!): [ChatLog]
  ChatRoom: [ChatRoom]
  ContryPerVisitor: [ContryPerVisitor]
  Login(username: String!, password: String!): String
  UserInfo: User
  SearchUser(username: String): Boolean
}

type Mutation {
  SendChat(
    chat_room: ID!
    uid: ID
    log: String
    nickname: String
    createAt: Date
  ): String
  SearchRoom(uid: ID, type: String!, category: String!): String
  EnterRoom(
    chat_room: ID!
    uid: ID!
    userType: String
    userInfo: String
  ): Boolean
  LeaveRoom(chat_room: ID!, uid: ID, nickname: String): Boolean
  SignUp(
    username: String!
    nickname: String!
    password: String!
    email: String
  ): Boolean
  LogOut: Boolean
  restoreAccessToken: String
  UpdateUserInfo(nickname: String, gender: String, description: String): Boolean
  SendMail(email: String!): String
}

type Subscription {
  CheckChat(chat_room: ID!): ChatLog
  LeaveRoom(chat_room: ID!): LeaveRoom
  EnterRoom(chat_room: ID!): EnterRoom
}

type LeaveRoom {
  leave: Boolean
  nickname: String
}

type EnterRoomUserInfo {
  nickname: String
  gender: String
  description: String
  imgPath: String
}

type EnterRoom {
  uid: String
  userType: String
  userInfo: EnterRoomUserInfo
}

#DB Types

type ChatLog {
  chat_room: ID!
  uid: ID
  nickname: String
  log: String
  createAt: Date
}

type ChatRoom {
  _id: ID!
  type: String
  category: String
  uid: [ID]
}

type ContryPerVisitor {
  country_code: String!
  count: Int
}

type User {
  _id: ID!
  username: String!
  nickname: String!
  email: String
  gender: String
  imgPath: String
  password: String
  description: String
  followers: [ID]
  following: [ID]
  createAt: Date
}
