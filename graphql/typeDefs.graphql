scalar Date

type Query {
  ChatLog(chat_room: ID!): [ChatLog]
  ChatRoom: [ChatRoom]
  ContryPerVisitor: [ContryPerVisitor]
}

type Mutation {
  SendChat(chat_room: ID!, uid: ID, log: String, createAt: Date): String
  SearchRoom(uid: ID, type: String): ID
  LeaveRoom(chat_room: ID!, uid: ID): Boolean
}
type Subscription {
  CheckChat(chat_room: ID!): ChatLog
  CheckRoom(chat_room: ID!): Leave
}

type Leave {
  leave: Boolean
}

#DB Types

type ChatLog {
  chat_room: ID!
  uid: ID
  log: String
  createAt: Date
}

type ChatRoom {
  _id: ID!
  type: String
  uid: [ID]
}

type ContryPerVisitor {
  country_code: String!
  count: Int
}

type User {
  _id: ID!
  username: String!
  email: String!
  password: String
  status: String
  followers: [ID]
  following: [ID]
  createAt: Date
}
